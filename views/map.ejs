<!DOCTYPE html>
<meta charset="utf-8">
<style>

.background {
  fill: none;
  pointer-events: all;
}

#countries, #states {
  fill: #222;
  stroke: #5F5F5F;
  stroke-width: .5px;
  stroke-linejoin: round;
  stroke-linecap: round;
  cursor: pointer;
}

.graticule {
  fill: none;
  stroke: #777;
  stroke-width: .5px;
  stroke-opacity: .5;
}

</style>
<body>
<script type="text/javascript" src="socket.io/socket.io.js"></script>
<script src="http://d3js.org/d3.v3.min.js"></script>
<script src="http://d3js.org/topojson.v1.min.js"></script>
<script src="/js/jquery.js"></script>
<script>
var m_width = $("body").width(),
    width = 938,
    height = 500,
    country,
    state;

var projection = d3.geo.mercator()
    .scale(150)
    .translate([width / 2, height / 1.5]);

var path = d3.geo.path()
    .projection(projection);

var graticule = d3.geo.graticule();

var svg = d3.select("body").append("svg")
    .attr("preserveAspectRatio", "xMidYMid")
    .attr("viewBox", "0 0 " + width + " " + height)
    .attr("width", m_width)
    .attr("height", m_width * height / width);

svg.append("rect")
    .attr("class", "background")
    .attr("width", width)
    .attr("height", height)
    .on("click", country_clicked);

var g = svg.append("g");

d3.json("/data/countries.topo.json", function(error, us) {
  g.append("g")
    .attr("id", "countries")
    .attr("class", "detectable")
    .selectAll("path")
    .data(topojson.feature(us, us.objects.countries).features)
    .enter()
    .append("path")
    .attr("id", function(d) { return d.id; })
    .attr("d", path)
    .on("click", country_clicked);
});

svg.append("path")
    .datum(graticule)
    .attr("class", "graticule")
    .attr("d", path);

svg.append("path")
   .datum({type: "LineString", coordinates: [[38.991621,-76.852587], [28.524963,-80.650813]]})
   .attr("class", "route")
   .attr('fill', 'none')
   .attr('stroke', 'red')
   .attr('stroke-width', '5px')
   .attr("d", path);

function zoom(xyz) {
  g.transition()
    .duration(750)
    .attr("transform", "translate(" + projection.translate() + ")scale(" + xyz[2] + ")translate(-" + xyz[0] + ",-" + xyz[1] + ")")
    .selectAll(["#countries", "#states", "#cities"])
    .style("stroke-width", 1.0 / xyz[2] + "px")
    .selectAll(".city")
    .attr("d", path.pointRadius(20.0 / xyz[2]));
}

function get_xyz(d) {
  var bounds = path.bounds(d);
  var w_scale = (bounds[1][0] - bounds[0][0]) / width;
  var h_scale = (bounds[1][1] - bounds[0][1]) / height;
  var z = .96 / Math.max(w_scale, h_scale);
  var x = (bounds[1][0] + bounds[0][0]) / 2;
  var y = (bounds[1][1] + bounds[0][1]) / 2 + (height / z / 6);
  return [x, y, z];
}

function country_clicked(d) {
  g.selectAll(["#states", "#cities"]).remove();
  d3.selectAll('circle').remove();
  d3.selectAll('text').remove();
  state = null;

  if (country) {
    g.selectAll("#" + country.id).style('display', null);
  }

  if (d && country !== d) {
    var xyz = get_xyz(d);
    country = d;
    zoom(xyz);

  } else {
    var xyz = [width / 2, height / 1.5, 1];
    country = null;
    zoom(xyz);
  }
}

jQuery.fn.d3Click = function () {
  this.each(function (i, e) {
    var evt = document.createEvent("MouseEvents");
    evt.initMouseEvent("click", true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);

    e.dispatchEvent(evt);
  });
};

$(document).ready( function() {
    var w = $("body").width();
    svg.attr("width", w);
    svg.attr("height", w * height / width);
});

$(window).resize(function() {
  var w = $("body").width();
  svg.attr("width", w);
  svg.attr("height", w * height / width);
});

var socket = io.connect('http://localhost:3000');
var routeCoordinates = [];

socket.on('tx', function (data) {
  // var coordinates = projection([ data.latitude, data.longitude ]);
  // var x = coordinates[0];
  // var y = coordinates[1];

  svg.selectAll(".pin")
    .data([data])      
  .enter().append("circle", ".pin")
    .attr("r", 1)
    .attr('fill', 'orange')
    .attr("transform", function(d) {
      return "translate(" + projection([
        d.latitude,
        d.longitude
      ]) + ")"
    })
    .transition()
      .duration(10000)
      .style("opacity",0);

  svg.selectAll(".label")
    .data([data])
  .enter().append("text", ".label")
    .attr('fill', 'orange')
    .text("$"+(Math.round(data.usd * 100) / 100))
    .attr('text-anchor', 'middle')
    .attr('font-size', '12px')
    .attr('font-family', 'sans-serif')
    .attr("transform", function(d) {
      var buffer;
      if(d.longitude < 0)
        buffer = 5;
      else
        buffer = (5-10);
      return "translate(" + projection([
        d.latitude,
        d.longitude + buffer
      ]) + ")"
    })
    .transition()
      .duration(10000)
      .style("opacity",0);

    // country 
    // console.log(document.elementFromPoint(x, y).getBoundingClientRect());
    // console.log("x :"+document.elementFromPoint(x, y).getBoundingClientRect().left);
    // console.log("y :"+document.elementFromPoint(x, y).getBoundingClientRect().top);
    // console.log("w :"+document.elementFromPoint(x, y).getBoundingClientRect().width);
    // console.log("h :"+document.elementFromPoint(x, y).getBoundingClientRect().height);

    // circle
    // console.log("x2 - x1 "+ (x - document.elementFromPoint(x, y).getBoundingClientRect().left));
    // console.log("y2 - y1 "+ (y - document.elementFromPoint(x, y).getBoundingClientRect().top));
    
    // automatic zooming
    // $(".background").d3Click();
    // $(document.elementFromPoint(x, y)).d3Click();
    
});
</script>
</body>

